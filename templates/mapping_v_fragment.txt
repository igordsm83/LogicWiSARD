reg [ADDRESS_WIDTH-1:0] in_mem [0:N_INDEXES-1];
wire [N_INDEXES*ADDRESS_WIDTH-1:0] in_mem_flat;
wire [N_INDEXES*ADDRESS_WIDTH-1:0] out_mem_flat;
wire [ADDRESS_WIDTH-1:0] out_mem [0:N_INDEXES-1];
reg [INDEX_WIDTH:0] cnt;
genvar g;
integer i;
        
generate
  for (g=0; g<N_INDEXES; g=g+1) begin : gen_mem_mapping
    assign in_mem_flat[(g+1)*ADDRESS_WIDTH-1:g*ADDRESS_WIDTH] = in_mem[g];
    assign out_mem[g] = out_mem_flat[(g+1)*ADDRESS_WIDTH-1:g*ADDRESS_WIDTH];
  end
endgenerate
        
always @ (posedge clk or negedge rst_n) begin
  if(!rst_n) begin
    for (i=0; i<N_INDEXES; i=i+1)
      in_mem[i] <= {ADDRESS_WIDTH{1'b0}};
  end
  else if(sink_valid) 
    in_mem[index] <= addr;
end
        
always @ (posedge clk or negedge rst_n) begin
  if(!rst_n)
    cnt <= N_INDEXES;
  else if(cnt<N_INDEXES)
    cnt <= cnt + 1;
  else if(sink_eop)
    cnt <= 0;
end

assign source_valid = cnt<N_INDEXES ? 1'b1 : 1'b0;
assign source_index = cnt[INDEX_WIDTH-1:0];

always @ (*) begin
  for (i=0; i<ADDRESS_WIDTH; i=i+1) 
    source_addr[i] = out_mem[cnt[INDEX_WIDTH-1:0]][ADDRESS_WIDTH-i-1];
end

always @ (posedge clk or negedge rst_n) begin
  if(!rst_n)
    source_sop <= 1'b0;
  else 
    source_sop <= sink_eop;
end

always @ (posedge clk or negedge rst_n) begin
  if(!rst_n)
    source_eop <= 1'b0;
  else if(cnt==N_INDEXES-2)
    source_eop <= 1'b1;
  else
    source_eop <= 1'b0;
end
